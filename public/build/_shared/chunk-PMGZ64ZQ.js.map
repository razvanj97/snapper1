{
  "version": 3,
  "sources": ["../../../app/components/portal.tsx", "../../../app/components/modal.tsx"],
  "sourcesContent": ["// Open a portal\n// To build this modal you will first need to build a helper component that creates a portal, which allows you to render a child component somewhere outside of the parent's document object model (DOM) branch while still allowing the parent component to manage it as if it were a direct child.\n// Note: This portal will be important because it will allow you to render the modal in a location that does not have any inherited styles or positioning from a parent that could affect the positioning of the modal.\n\n// app/components/portal.tsx\n\nimport { createPortal } from \"react-dom\";\nimport { useState, useEffect } from \"react\";\n\ninterface props {\n\tchildren: React.ReactNode;\n\twrapperId: string;\n}\n\n// 1 A function is defined that generates a div with an id. That element is then attached to the document's body.\nconst createWrapper = (wrapperId: string) => {\n\tconst wrapper = document.createElement(\"div\");\n\twrapper.setAttribute(\"id\", wrapperId);\n\tdocument.body.appendChild(wrapper);\n\treturn wrapper;\n};\n\nexport const Portal: React.FC<props> = ({ children, wrapperId }) => {\n\tconst [wrapper, setWrapper] = useState<HTMLElement | null>(null);\n\n\tuseEffect(() => {\n\t\t// 2 If an element with the provided id does not already exist, invoke the createWrapper function to create one.\n\t\tlet element = document.getElementById(wrapperId);\n\t\tlet created = false;\n\n\t\tif (!element) {\n\t\t\tcreated = true;\n\t\t\telement = createWrapper(wrapperId);\n\t\t}\n\n\t\tsetWrapper(element);\n\n\t\t// 3 When the Portal component is un-mounted, this will destroy the element.\n\t\treturn () => {\n\t\t\tif (created && element?.parentNode) {\n\t\t\t\telement.parentNode.removeChild(element);\n\t\t\t}\n\t\t};\n\t}, [wrapperId]);\n\n\tif (wrapper === null) return null;\n\n\t// 4 Creates a portal to the newly generated div.\n\treturn createPortal(children, wrapper);\n};\n", "import { Portal } from \"./portal\";\nimport { useNavigate } from \"@remix-run/react\";\n\ninterface props {\n\tchildren: React.ReactNode;\n\tisOpen: boolean;\n\tariaLabel?: string;\n\tclassName?: string;\n}\n\nexport const Modal: React.FC<props> = ({\n\tchildren,\n\tisOpen,\n\tariaLabel,\n\tclassName,\n}) => {\n\tconst navigate = useNavigate();\n\tif (!isOpen) return null;\n\n\treturn (\n\t\t<Portal wrapperId=\"modal\">\n\t\t\t<div\n\t\t\t\tclassName=\"fixed inset-0 overflow-y-auto bg-gray-600 bg-opacity-80\"\n\t\t\t\taria-labelledby={ariaLabel ?? \"modal-title\"}\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\tonClick={() => navigate(\"/home\")}></div>\n\t\t\t<div className=\"fixed inset-0 pointer-events-none flex justify-center items-center max-h-screen overflow-scroll\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={`${className} p-4 bg-gray-200 pointer-events-auto max-h-screen md:rounded-xl`}>\n\t\t\t\t\t{/* This is where the modal content is rendered  */}\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Portal>\n\t);\n};\n"],
  "mappings": ";;;;;;;;;;;;;AAMA,uBAA6B;AAC7B,mBAAoC;AAQpC,IAAM,gBAAgB,CAAC,cAAsB;AAC5C,QAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,UAAQ,aAAa,MAAM,SAAS;AACpC,WAAS,KAAK,YAAY,OAAO;AACjC,SAAO;AACR;AAEO,IAAM,SAA0B,CAAC,EAAE,UAAU,UAAU,MAAM;AACnE,QAAM,CAAC,SAAS,UAAU,QAAI,uBAA6B,IAAI;AAE/D,8BAAU,MAAM;AAEf,QAAI,UAAU,SAAS,eAAe,SAAS;AAC/C,QAAI,UAAU;AAEd,QAAI,CAAC,SAAS;AACb,gBAAU;AACV,gBAAU,cAAc,SAAS;AAAA,IAClC;AAEA,eAAW,OAAO;AAGlB,WAAO,MAAM;AACZ,UAAI,YAAW,mCAAS,aAAY;AACnC,gBAAQ,WAAW,YAAY,OAAO;AAAA,MACvC;AAAA,IACD;AAAA,EACD,GAAG,CAAC,SAAS,CAAC;AAEd,MAAI,YAAY;AAAM,WAAO;AAG7B,aAAO,+BAAa,UAAU,OAAO;AACtC;;;ACjDA;AAUO,IAAM,QAAyB,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,MAAM;AACL,QAAM,WAAW,YAAY;AAC7B,MAAI,CAAC;AAAQ,WAAO;AAEpB,SACC,mDAAC;AAAA,IAAO,WAAU;AAAA,IACjB;AAAA,yDAAC;AAAA,QACA,WAAU;AAAA,QACV,mBAAiB,gCAAa;AAAA,QAC9B,MAAK;AAAA,QACL,cAAW;AAAA,QACX,SAAS,MAAM,SAAS,OAAO;AAAA,SALhC;AAAA;AAAA;AAAA;AAAA,aAKmC;AAAA,MACnC,mDAAC;AAAA,QAAI,WAAU;AAAA,QACd,6DAAC;AAAA,UACA,WAAW,GAAG;AAAA,UAEb;AAAA,WAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,SALD;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA;AAAA,KAbD;AAAA;AAAA;AAAA;AAAA,SAcA;AAEF;",
  "names": []
}

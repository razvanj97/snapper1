{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// app/routes/login.tsx\nimport { useRef, useEffect, useState } from \"react\";\nimport { Layout } from \"~/components/layout\";\nimport { FormField } from \"~/components/form-field\";\nimport { json, ActionFunction } from \"@remix-run/node\";\nimport {\n\tvalidateEmail,\n\tvalidateName,\n\tvalidatePassword,\n} from \"~/utils/validators.server\";\nimport { login, register } from \"~/utils/auth.server\";\nimport { useActionData } from \"@remix-run/react\";\n\n// ... pulls the form data out of the request object.\n// ... ensures an email and password were provided.\n// ... ensures firstName and lastName were provided if the _action value is \"register\".\n// ... returns an error along with the form field values if any problems occur so you can re-populate the form with the user's input and an error message later on if any of those fields are invalid.\nexport const action: ActionFunction = async ({ request }) => {\n\tconst form = await request.formData();\n\tconst action = form.get(\"_action\");\n\tconst email = form.get(\"email\");\n\tconst password = form.get(\"password\");\n\tlet firstName = form.get(\"firstName\");\n\tlet lastName = form.get(\"lastName\");\n\n\tif (\n\t\ttypeof action !== \"string\" ||\n\t\ttypeof email !== \"string\" ||\n\t\ttypeof password !== \"string\"\n\t) {\n\t\treturn json({ error: `Invalid Form Data`, form: action }, { status: 400 });\n\t}\n\n\tif (\n\t\taction === \"register\" &&\n\t\t(typeof firstName !== \"string\" || typeof lastName !== \"string\")\n\t) {\n\t\treturn json({ error: `Invalid Form Data`, form: action }, { status: 400 });\n\t}\n\n\tconst errors = {\n\t\temail: validateEmail(email),\n\t\tpassword: validatePassword(password),\n\t\t...(action === \"register\"\n\t\t\t? {\n\t\t\t\t\tfirstName: validateName((firstName as string) || \"\"),\n\t\t\t\t\tlastName: validateName((lastName as string) || \"\"),\n\t\t\t  }\n\t\t\t: {}),\n\t};\n\n\tif (Object.values(errors).some(Boolean))\n\t\treturn json(\n\t\t\t{\n\t\t\t\terrors,\n\t\t\t\tfields: { email, password, firstName, lastName },\n\t\t\t\tform: action,\n\t\t\t},\n\t\t\t{ status: 400 }\n\t\t);\n\n\tswitch (action) {\n\t\tcase \"login\": {\n\t\t\treturn await login({ email, password });\n\t\t}\n\t\tcase \"register\": {\n\t\t\tfirstName = firstName as string;\n\t\t\tlastName = lastName as string;\n\t\t\treturn await register({ email, password, firstName, lastName });\n\t\t}\n\t\tdefault:\n\t\t\treturn json({ error: `Invalid Form Data` }, { status: 400 });\n\t}\n};\n\nexport default function Login() {\n\tconst [action, setAction] = useState(\"login\");\n\t//Hooks into the data returned from the action function.\n\tconst actionData = useActionData();\n\t// Sets up an errors variable which will hold field-specific errors, such as \"Invalid Email\", in an object. It also sets up a formError variable which will hold error messages to display form messages such as \"Incorrect Login\".\n\tconst firstLoad = useRef(true);\n\tconst [errors, setErrors] = useState(actionData?.errors || {});\n\tconst [formError, setFormError] = useState(actionData?.error || \"\");\n\t// Updates the formData state variables to default to any values returned by the action function if available.\n\tconst [formData, setFormData] = useState({\n\t\temail: actionData?.fields?.email || \"\",\n\t\tpassword: actionData?.fields?.password || \"\",\n\t\tfirstName: actionData?.fields?.lastName || \"\",\n\t\tlastName: actionData?.fields?.firstName || \"\",\n\t});\n\n\t// Clear out the form and any errors being shown.\n\tuseEffect(() => {\n\t\tif (!firstLoad.current) {\n\t\t\tconst newState = {\n\t\t\t\temail: \"\",\n\t\t\t\tpassword: \"\",\n\t\t\t\tfirstName: \"\",\n\t\t\t\tlastName: \"\",\n\t\t\t};\n\t\t\tsetErrors(newState);\n\t\t\tsetFormError(\"\");\n\t\t\tsetFormData(newState);\n\t\t}\n\t}, [action]);\n\n\tuseEffect(() => {\n\t\tif (!firstLoad.current) {\n\t\t\tsetFormError(\"\");\n\t\t}\n\t}, [formData]);\n\n\tuseEffect(() => {\n\t\tfirstLoad.current = false;\n\t}, []);\n\n\t// Updates the form data when an input changes\n\tconst handleInputChange = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\tfield: string\n\t) => {\n\t\tsetFormData((form) => ({ ...form, [field]: event.target.value }));\n\t};\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className=\"h-full justify-center items-center flex flex-col gap-y-4\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => setAction(action == \"login\" ? \"register\" : \"login\")}\n\t\t\t\t\tclassName=\"absolute top-8 right-8 rounded-xl bg-yellow-300 font-semibold text-blue-600 px-3 py-2 transition duration-300 ease-in-out hover:bg-yellow-400 hover:-translate-y-1\">\n\t\t\t\t\t{action === \"login\" ? \"Sign Up\" : \"Sign In\"}\n\t\t\t\t</button>\n\t\t\t\t<h2 className=\"text-5xl font-extrabold text-yellow-300\">\n\t\t\t\t\tWelcome to Snapper!\n\t\t\t\t</h2>\n\n\t\t\t\t<p className=\"font-semibold text-slate-300\">\n\t\t\t\t\t+{\" \"}\n\t\t\t\t\t{action === \"login\"\n\t\t\t\t\t\t? \"Log In To Give Some Praise!\"\n\t\t\t\t\t\t: \"Sign Up To Get Started!\"}\n\t\t\t\t\t+{\" \"}\n\t\t\t\t</p>\n\n\t\t\t\t<form method=\"POST\" className=\"rounded-2xl bg-gray-200 p-6 w-96\">\n\t\t\t\t\t<div className=\"text-xs font-semibold text-center tracking-wide text-red-500 w-full\">\n\t\t\t\t\t\t{formError}\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormField\n\t\t\t\t\t\thtmlFor=\"email\"\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\tvalue={formData.email}\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e, \"email\")}\n\t\t\t\t\t\terror={errors?.email}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormField\n\t\t\t\t\t\thtmlFor=\"password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\tvalue={formData.password}\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e, \"password\")}\n\t\t\t\t\t\terror={errors?.password}\n\t\t\t\t\t/>\n\t\t\t\t\t{action === \"register\" && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\t\thtmlFor=\"firstName\"\n\t\t\t\t\t\t\t\tlabel=\"First Name\"\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e, \"firstName\")}\n\t\t\t\t\t\t\t\tvalue={formData.firstName}\n\t\t\t\t\t\t\t\terror={errors?.firstName}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\t\thtmlFor=\"lastName\"\n\t\t\t\t\t\t\t\tlabel=\"Last Name\"\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e, \"lastName\")}\n\t\t\t\t\t\t\t\tvalue={formData.lastName}\n\t\t\t\t\t\t\t\terror={errors?.lastName}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"w-full text-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tname=\"_action\"\n\t\t\t\t\t\t\tvalue={action}\n\t\t\t\t\t\t\tclassName=\"rounded-xl mt-2 bg-yellow-300 px-3 py-2 text-blue-600 font-semibold transition duration-300 ease-in-out hover:bg-yellow-400 hover:-translate-y-1\">\n\t\t\t\t\t\t\t{action === \"login\" ? \"Sign In\" : \"Sign Up\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</Layout>\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
